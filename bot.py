from aiogram import Bot, Dispatcher, types
from aiogram.types import (
    ReplyKeyboardMarkup,
    KeyboardButton,
    InlineKeyboardMarkup,
    InlineKeyboardButton,
    FSInputFile,
)
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.filters.command import Command  # noqa

from config import TOKEN, ADMINS
from database import User, session
from wg_utils import generate_wg_config
from datetime import datetime
import asyncio
import subprocess
import os

bot = Bot(token=TOKEN)
storage = MemoryStorage()
dp = Dispatcher(storage=storage)

user_keyboard = ReplyKeyboardMarkup(
    resize_keyboard=True,
    keyboard=[
        [KeyboardButton(text="–ö—É–ø–∏—Ç—å VPN üöÄ")],
        [KeyboardButton(text="–ú–æ–π –∫–æ–Ω—Ñ–∏–≥ ‚öôÔ∏è"), KeyboardButton(text="–ü–æ–¥–¥–µ—Ä–∂–∫–∞ üÜò")],
    ],
)

admin_keyboard = ReplyKeyboardMarkup(
    resize_keyboard=True,
    keyboard=[
        [KeyboardButton(text="–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ üìä"), KeyboardButton(text="–Æ–∑–µ—Ä—ã üë•"), KeyboardButton(text="–û–±–Ω–æ–≤–∏—Ç—å –±–æ—Ç üîÑ")],
        [KeyboardButton(text="–ë–∞–Ω üî®"), KeyboardButton(text="–†–∞—Å—Å—ã–ª–∫–∞ üì¢")],
    ],
)

TARIFFS = {
    "1 –º–µ—Å—è—Ü": {"days": 30},
    "3 –º–µ—Å—è—Ü–∞": {"days": 90},
    "6 –º–µ—Å—è—Ü–µ–≤": {"days": 180},
}

async def start(message: types.Message):
    user = session.query(User).filter_by(user_id=message.from_user.id).first()
    if not user:
        user = User(
            user_id=message.from_user.id,
            username=message.from_user.username,
            join_date=datetime.now(),
            is_active=True,
        )
        session.add(user)
        session.commit()
    if message.from_user.id in ADMINS:
        await message.answer("–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", reply_markup=admin_keyboard)
    else:
        await message.answer("–ü—Ä–∏–≤–µ—Ç! –ö—É–ø–∏ VPN –∏ –∫–∞—Ç–∞–π—Å—è –±–µ–∑ –±–ª–æ–∫–æ–≤!", reply_markup=user_keyboard)

async def buy_vpn(message: types.Message):
    buttons = [
        [InlineKeyboardButton(text=f"{name}", callback_data=f"tariff_{name}")]
        for name in TARIFFS
    ]
    markup = InlineKeyboardMarkup(inline_keyboard=buttons)
    await message.answer("–í—ã–±–µ—Ä–∏ —Ç–∞—Ä–∏—Ñ:", reply_markup=markup)

async def process_fake_payment(callback: types.CallbackQuery):
    tariff = callback.data.split("_",1)[1]
    days = TARIFFS[tariff]["days"]
    user = session.query(User).filter_by(user_id=callback.from_user.id).first()
    if user:
        user.is_active = True
        session.commit()
        config_path, qr_path = generate_wg_config(user.user_id, days)
        await bot.send_message(callback.from_user.id, f"–¢–∞—Ä–∏—Ñ '{tariff}' –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω! –í–æ—Ç –∫–æ–Ω—Ñ–∏–≥:")
        await bot.send_document(callback.from_user.id, FSInputFile(config_path))
        await bot.send_photo(callback.from_user.id, FSInputFile(qr_path))

async def get_config(message: types.Message):
    user = session.query(User).filter_by(user_id=message.from_user.id).first()
    if not user or not user.is_active:
        await message.answer("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏. –ö—É–ø–∏ VPN —á–µ—Ä–µ–∑ '–ö—É–ø–∏—Ç—å VPN üöÄ'")
        return
    config_path, qr_path = generate_wg_config(user.user_id, 30)
    await message.answer_document(FSInputFile(config_path))
    await message.answer_photo(FSInputFile(qr_path))

async def support(message: types.Message):
    await message.answer("–ü–æ–¥–¥–µ—Ä–∂–∫–∞: @your_support_username –∏–ª–∏ –Ω–∞–ø–∏—à–∏ —Å—é–¥–∞ –≤–∞—à–∏ –≤–æ–ø—Ä–æ—Å—ã!")

async def stats(message: types.Message):
    count = session.query(User).count()
    await message.answer(f"üìä –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {count}")

async def users_list(message: types.Message):
    users = session.query(User.user_id).all()
    ids = [str(u.user_id) for u in users]
    await message.answer("–°–ø–∏—Å–æ–∫ user_id:\n" + "\n".join(ids))

async def ban_user(message: types.Message):
    await message.answer("–§—É–Ω–∫—Ü–∏—è –±–∞–Ω–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.")

async def mailing(message: types.Message):
    await message.answer("–§—É–Ω–∫—Ü–∏—è —Ä–∞—Å—Å—ã–ª–∫–∏ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.")

async def update_bot(message: types.Message):
    await message.answer("üîÑ –ù–∞—á–∏–Ω–∞—é –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–æ—Ç–∞...")
    # –û–±–Ω–æ–≤–ª—è–µ–º –∏–∑ Git
    subprocess.call(["git", "-C", "/root/vpnbot", "pull"] )
    await message.answer("‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ, –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫...")
    # –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º —Ç–µ–∫—É—â–∏–π –ø—Ä–æ—Ü–µ—Å—Å
    os.execv("/usr/bin/python3", ["python3", "/root/vpnbot/bot.py"])

# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Ö–µ–Ω–¥–ª–µ—Ä–æ–≤

# –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏
dp.message.register(start, Command(commands=["start"]))
dp.message.register(buy_vpn, lambda m: m.text == "–ö—É–ø–∏—Ç—å VPN üöÄ")
dp.callback_query.register(process_fake_payment, lambda cb: cb.data and cb.data.startswith("tariff_"))
dp.message.register(get_config, lambda m: m.text == "–ú–æ–π –∫–æ–Ω—Ñ–∏–≥ ‚öôÔ∏è")
dp.message.register(support, lambda m: m.text == "–ü–æ–¥–¥–µ—Ä–∂–∫–∞ üÜò")

# –ê–¥–º–∏–Ω
dp.message.register(stats, lambda m: m.text == "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ üìä")
dp.message.register(users_list, lambda m: m.text == "–Æ–∑–µ—Ä—ã üë•")
dp.message.register(update_bot, lambda m: m.text == "–û–±–Ω–æ–≤–∏—Ç—å –±–æ—Ç üîÑ")
dp.message.register(ban_user, lambda m: m.text == "–ë–∞–Ω üî®")
dp.message.register(mailing, lambda m: m.text == "–†–∞—Å—Å—ã–ª–∫–∞ üì¢")
dp.message.register(ban_user, lambda m: m.text == "–ë–∞–Ω üî®")
dp.message.register(mailing, lambda m: m.text == "–†–∞—Å—Å—ã–ª–∫–∞ üì¢")
dp.message.register(stats, lambda m: m.text == "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ üìä")
dp.message.register(users_list, lambda m: m.text == "–Æ–∑–µ—Ä—ã üë•")
dp.message.register(update_bot, lambda m: m.text == "–û–±–Ω–æ–≤–∏—Ç—å –±–æ—Ç üîÑ")
dp.message.register(ban_user, lambda m: m.text == "–ë–∞–Ω üî®")
dp.message.register(mailing, lambda m: m.text == "–†–∞—Å—Å—ã–ª–∫–∞ üì¢")

async def main():
    await dp.start_polling(bot)

if __name__ == '__main__':
    asyncio.run(main())
