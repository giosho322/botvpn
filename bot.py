from aiogram import Bot, Dispatcher, types
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton, FSInputFile
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.filters.command import Command, CommandObject

from config import TOKEN, ADMINS
from database import User, session
from wg_utils import generate_wg_config
from datetime import datetime
import asyncio
import os

bot = Bot(token=TOKEN)
storage = MemoryStorage()
dp = Dispatcher(storage=storage)

user_keyboard = ReplyKeyboardMarkup(
    resize_keyboard=True,
    keyboard=[
        [KeyboardButton(text="–ö—É–ø–∏—Ç—å VPN üöÄ")],
        [KeyboardButton(text="–ú–æ–π –∫–æ–Ω—Ñ–∏–≥ ‚öôÔ∏è"), KeyboardButton(text="–ü–æ–¥–¥–µ—Ä–∂–∫–∞ üÜò")],
        [KeyboardButton(text="–ö–∞–∫ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥ üìñ")],
    ],
)

admin_keyboard = ReplyKeyboardMarkup(
    resize_keyboard=True,
    keyboard=[
        [KeyboardButton(text="–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ üìä"), KeyboardButton(text="–Æ–∑–µ—Ä—ã üë•"), KeyboardButton(text="–û–±–Ω–æ–≤–∏—Ç—å –±–æ—Ç üîÑ")],
        [KeyboardButton(text="–ë–∞–Ω üî®"), KeyboardButton(text="–†–∞—Å—Å—ã–ª–∫–∞ üì¢")],
    ],
)

TARIFFS = {
    "1 –º–µ—Å—è—Ü": {"days": 30},
    "3 –º–µ—Å—è—Ü–∞": {"days": 90},
    "6 –º–µ—Å—è—Ü–µ–≤": {"days": 180},
}

async def start(message: types.Message):
    user = session.query(User).filter_by(user_id=message.from_user.id).first()
    if not user:
        user = User(
            user_id=message.from_user.id,
            username=message.from_user.username,
            join_date=datetime.now(),
            is_active=True,
        )
        session.add(user)
        session.commit()
    if message.from_user.id in ADMINS:
        await message.answer("–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", reply_markup=admin_keyboard)
    else:
        await message.answer("–ü—Ä–∏–≤–µ—Ç! –ö—É–ø–∏ VPN –∏ –∫–∞—Ç–∞–π—Å—è –±–µ–∑ –±–ª–æ–∫–æ–≤!", reply_markup=user_keyboard)

# –û–±—â–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø–æ–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î –ø–æ id –∏–ª–∏ username
def find_user_by_id_or_username(identifier: str):
    if identifier.startswith('@'):
        username = identifier[1:]
        return session.query(User).filter_by(username=username).first()
    else:
        try:
            user_id = int(identifier)
            return session.query(User).filter_by(user_id=user_id).first()
        except ValueError:
            return None

# –ë–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async def ban_user(message: types.Message, command: CommandObject):
    if message.from_user.id not in ADMINS:
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –±–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")
        return
    args = command.args
    if not args:
        await message.answer("‚ùó –£–∫–∞–∂–∏—Ç–µ user_id –∏–ª–∏ @username –¥–ª—è –±–∞–Ω–∞.\n–ü—Ä–∏–º–µ—Ä: /ban 123456789")
        return
    user = find_user_by_id_or_username(args.strip())
    if not user:
        await message.answer("‚ùó –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return
    user.is_active = False
    session.commit()
    await message.answer(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.username or user.user_id} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω.")

# –†–∞–∑–±–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async def unban_user(message: types.Message, command: CommandObject):
    if message.from_user.id not in ADMINS:
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")
        return
    args = command.args
    if not args:
        await message.answer("‚ùó –£–∫–∞–∂–∏—Ç–µ user_id –∏–ª–∏ @username –¥–ª—è —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏.\n–ü—Ä–∏–º–µ—Ä: /unban 123456789")
        return
    user = find_user_by_id_or_username(args.strip())
    if not user:
        await message.answer("‚ùó –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return
    user.is_active = True
    session.commit()
    await message.answer(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.username or user.user_id} —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω.")

# –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –ø–æ–¥—Ä–æ–±–Ω—ã–º —Å–ø–∏—Å–∫–æ–º
async def stats(message: types.Message):
    if message.from_user.id not in ADMINS:
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.")
        return
    users = session.query(User).all()
    total = len(users)
    active = sum(1 for u in users if u.is_active)
    inactive = total - active

    text = f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:\n–í—Å–µ–≥–æ: {total}\n–ê–∫—Ç–∏–≤–Ω—ã—Ö: {active}\n–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö: {inactive}\n\n–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:\n"
    for u in users:
        status = "‚úÖ –ê–∫—Ç–∏–≤–µ–Ω" if u.is_active else "‚ùå –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω"
        name = u.username if u.username else str(u.user_id)
        text += f"- {name} ‚Äî {status}\n"
    await message.answer(text)

# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Ö–µ–Ω–¥–ª–µ—Ä–æ–≤
dp.message.register(start, Command(commands=["start"]))
dp.message.register(ban_user, Command(commands=["ban"]))
dp.message.register(unban_user, Command(commands=["unban"]))
dp.message.register(stats, lambda m: m.text == "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ üìä")

# –¢—É—Ç –¥–æ–±–∞–≤—å –æ—Å—Ç–∞–ª—å–Ω—ã–µ —Ö–µ–Ω–¥–ª–µ—Ä—ã –∏–∑ —Ç–≤–æ–µ–π –≤–µ—Ä—Å–∏–∏, –Ω–∞–ø—Ä–∏–º–µ—Ä buy_vpn, get_config –∏ —Ç.–ø.

async def main():
    await dp.start_polling(bot)

if __name__ == '__main__':
    import asyncio
    asyncio.run(main())
