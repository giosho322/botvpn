from aiogram import Bot, Dispatcher, executor, types #rrrrr
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from config import TOKEN, ADMINS
from database import User, session
from wg_utils import generate_wg_config
from datetime import datetime

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = Bot(token=TOKEN)
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)

### --- –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã --- ###
user_keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
user_keyboard.add(KeyboardButton("–ö—É–ø–∏—Ç—å VPN üöÄ"))
user_keyboard.add(KeyboardButton("–ú–æ–π –∫–æ–Ω—Ñ–∏–≥ ‚öôÔ∏è"), KeyboardButton("–ü–æ–¥–¥–µ—Ä–∂–∫–∞ üÜò"))

admin_keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
admin_keyboard.add(KeyboardButton("–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ üìä"), KeyboardButton("–Æ–∑–µ—Ä—ã üë•"))
admin_keyboard.add(KeyboardButton("–ë–∞–Ω üî®"), KeyboardButton("–†–∞—Å—Å—ã–ª–∫–∞ üì¢"))

### --- –¢–∞—Ä–∏—Ñ—ã --- ###
TARIFFS = {
    "1 –º–µ—Å—è—Ü": {"days": 30, "price": 0},  # –¶–µ–Ω—ã –±–æ–ª—å—à–µ –Ω–µ –∏–º–µ—é—Ç –∑–Ω–∞—á–µ–Ω–∏—è
    "3 –º–µ—Å—è—Ü–∞": {"days": 90, "price": 0},
    "6 –º–µ—Å—è—Ü–µ–≤": {"days": 180, "price": 0},
}

### --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ --- ###
@dp.message_handler(commands=['start'])
async def start(message: types.Message):
    user = session.query(User).filter_by(user_id=message.from_user.id).first()
    if not user:
        user = User(
            user_id=message.from_user.id,
            username=message.from_user.username,
            join_date=datetime.now(),
            is_active=True  # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∞–∫—Ç–∏–≤–∏—Ä—É–µ–º
        )
        session.add(user)
        session.commit()

    if user.user_id in ADMINS:
        await message.answer("–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", reply_markup=admin_keyboard)
    else:
         await message.answer("–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", reply_markup=admin_keyboard)
    else:
        await message.answer("–ü—Ä–∏–≤–µ—Ç, –∫–æ–∂–∞–Ω–Ω—ã–π! –ö—É–ø–∏ VPN –∏ –∫–∞—Ç–∞–π—Å—è –±–µ–∑ –±–ª–æ–∫–æ–≤!", reply_markup=user_keyboard)

@dp.message_handler(text="–ö—É–ø–∏—Ç—å VPN üöÄ")
async def buy_vpn(message: types.Message):
    markup = InlineKeyboardMarkup()
    for name, data in TARIFFS.items():
        markup.add(InlineKeyboardButton(
            text=f"{name} (–≤—Ä–µ–º–µ–Ω–Ω–æ –±–µ—Å–ø–ª–∞—Ç–Ω–æ)",
            callback_data=f"tariff_{name}"
        ))
    await message.answer("–í—ã–±–µ—Ä–∏ —Ç–∞—Ä–∏—Ñ:", reply_markup=markup)

@dp.callback_query_handler(lambda c: c.data.startswith('tariff_'))
async def process_fake_payment(callback: types.CallbackQuery):
    tariff_name = callback.data.split('_', 1)[1]
    days = TARIFFS[tariff_name]["days"]

    user = session.query(User).filter_by(user_id=callback.from_user.id).first()
    if user:
        user.is_active = True
        session.commit()

        config_path, qr_path = generate_wg_config(user.user_id, days)
        await bot.send_message(callback.from_user.id, f"–¢–∞—Ä–∏—Ñ '{tariff_name}' –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω! –í–æ—Ç —Ç–≤–æ–π –∫–æ–Ω—Ñ–∏–≥:")

        with open(config_path, "rb") as config_file:
            await bot.send_document(callback.from_user.id, config_file)
        with open(qr_path, "rb") as qr_file:
            await bot.send_photo(callback.from_user.id, qr_file)

@dp.message_handler(text="–ú–æ–π –∫–æ–Ω—Ñ–∏–≥ ‚öôÔ∏è")
async def get_config(message: types.Message):
    user = session.query(User).filter_by(user_id=message.from_user.id).first()
    if not user or not user.is_active:
        await message.answer("–£ —Ç–µ–±—è –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏! –í—ã–±–µ—Ä–∏ —Ç–∞—Ä–∏—Ñ —á–µ—Ä–µ–∑ '–ö—É–ø–∏—Ç—å VPN üöÄ'")
        return

    config_path, qr_path = generate_wg_config(user.user_id, 30)
    with open(config_path, "rb") as config_file:
        await message.answer_document(config_file)
    with open(qr_path, "rb") as qr_file:
        await message.answer_photo(qr_file)

@dp.message_handler(text="–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ üìä")
async def stats(message: types.Message):
    if message.from_user.id not in ADMINS:
        return
    users_count = session.query(User).count()
    await message.answer(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\nüë• –Æ–∑–µ—Ä–æ–≤: {users_count}")

### --- –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ --- ###
if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
