from aiogram import Bot, Dispatcher, types
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton, FSInputFile
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.filters.command import Command, CommandObject
from aiogram.enums import ParseMode

from config import TOKEN, ADMINS
from database import User, session
from wg_utils import generate_wg_config
from datetime import datetime
import asyncio
import subprocess
import os

bot = Bot(token=TOKEN)
storage = MemoryStorage()
dp = Dispatcher(storage=storage)

# --- –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã ---
user_keyboard = ReplyKeyboardMarkup(
    resize_keyboard=True,
    keyboard=[
        [KeyboardButton(text="–ö—É–ø–∏—Ç—å VPN üöÄ")],
        [KeyboardButton(text="–ú–æ–π –∫–æ–Ω—Ñ–∏–≥ ‚öôÔ∏è"), KeyboardButton(text="–ü–æ–¥–¥–µ—Ä–∂–∫–∞ üÜò")],
        [KeyboardButton(text="–ö–∞–∫ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥ üìñ")],
    ],
)

admin_keyboard = ReplyKeyboardMarkup(
    resize_keyboard=True,
    keyboard=[
        [KeyboardButton(text="–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ üìä"), KeyboardButton(text="–Æ–∑–µ—Ä—ã üë•"), KeyboardButton(text="–û–±–Ω–æ–≤–∏—Ç—å –±–æ—Ç üîÑ")],
        [KeyboardButton(text="–ë–∞–Ω üî®"), KeyboardButton(text="–†–∞—Å—Å—ã–ª–∫–∞ üì¢")],
    ],
)

# --- –¢–∞—Ä–∏—Ñ—ã ---
TARIFFS = {
    "1 –º–µ—Å—è—Ü": {"days": 30},
    "3 –º–µ—Å—è—Ü–∞": {"days": 90},
    "6 –º–µ—Å—è—Ü–µ–≤": {"days": 180},
}

# --- –§—É–Ω–∫—Ü–∏–∏ ---

async def start(message: types.Message):
    user = session.query(User).filter_by(user_id=message.from_user.id).first()
    if not user:
        user = User(
            user_id=message.from_user.id,
            username=message.from_user.username,
            join_date=datetime.now(),
            is_active=True,
        )
        session.add(user)
        session.commit()
    if message.from_user.id in ADMINS:
        await message.answer("–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", reply_markup=admin_keyboard)
    else:
        await message.answer("–ü—Ä–∏–≤–µ—Ç! –ö—É–ø–∏ VPN –∏ –∫–∞—Ç–∞–π—Å—è –±–µ–∑ –±–ª–æ–∫–æ–≤!", reply_markup=user_keyboard)

async def buy_vpn(message: types.Message):
    buttons = [
        [InlineKeyboardButton(text=f"{name}", callback_data=f"tariff_{name}")]
        for name in TARIFFS
    ]
    markup = InlineKeyboardMarkup(inline_keyboard=buttons)
    await message.answer("–í—ã–±–µ—Ä–∏ —Ç–∞—Ä–∏—Ñ:", reply_markup=markup)

async def process_fake_payment(callback: types.CallbackQuery):
    tariff = callback.data.split("_", 1)[1]
    days = TARIFFS[tariff]["days"]
    user = session.query(User).filter_by(user_id=callback.from_user.id).first()
    if user:
        user.is_active = True
        session.commit()
        config_path, qr_path = generate_wg_config(user.user_id, days)
        await bot.send_message(callback.from_user.id, f"–¢–∞—Ä–∏—Ñ '{tariff}' –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω! –í–æ—Ç –∫–æ–Ω—Ñ–∏–≥:")
        await bot.send_document(callback.from_user.id, FSInputFile(config_path))
        await bot.send_photo(callback.from_user.id, FSInputFile(qr_path))
    await callback.answer()  # –ß—Ç–æ–±—ã —É–±—Ä–∞—Ç—å "—á–∞—Å–∏–∫–∏" –≤ UI

async def get_config(message: types.Message):
    user = session.query(User).filter_by(user_id=message.from_user.id).first()
    if not user or not user.is_active:
        await message.answer("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏. –ö—É–ø–∏ VPN —á–µ—Ä–µ–∑ '–ö—É–ø–∏—Ç—å VPN üöÄ'")
        return
    config_path, qr_path = generate_wg_config(user.user_id, 30)
    await message.answer_document(FSInputFile(config_path))
    await message.answer_photo(FSInputFile(qr_path))

async def support(message: types.Message):
    await message.answer("–ü–æ–¥–¥–µ—Ä–∂–∫–∞: @your_support_username –∏–ª–∏ –Ω–∞–ø–∏—à–∏ —Å—é–¥–∞ –≤–∞—à–∏ –≤–æ–ø—Ä–æ—Å—ã!")

async def how_install(message: types.Message):
    text = (
        "üìñ *–ö–∞–∫ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å VPN-–∫–æ–Ω—Ñ–∏–≥* üìñ\n"
        "1. –°–∫–∞—á–∞–π `.conf` —Ñ–∞–π–ª –Ω–∞ –ü–ö –∏–ª–∏ —Ç–µ–ª–µ—Ñ–æ–Ω.\n"
        "2. –ù–∞ –ü–ö: —É—Å—Ç–∞–Ω–æ–≤–∏ WireGuard –∏ –∏–º–ø–æ—Ä—Ç–∏—Ä—É–π —á–µ—Ä–µ–∑ 'Import tunnel from file' üåê\n"
        "3. –ù–∞ —Ç–µ–ª–µ—Ñ–æ–Ω: —É—Å—Ç–∞–Ω–æ–≤–∏ WireGuard –∏–∑ AppStore/PlayMarket –∏ –∏–º–ø–æ—Ä—Ç–∏—Ä—É–π –∫–æ–Ω—Ñ–∏–≥ üì±\n"
        "4. –ù–∞–∂–º–∏ 'Activate' –∏ –ø–æ–ª—å–∑—É–π—Å—è VPN üöÄ\n"
        "–ï—Å–ª–∏ —á—Ç–æ-—Ç–æ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç ‚Äî –ø–∏—à–∏ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É üÜò"
    )
    await message.answer(text, parse_mode=ParseMode.MARKDOWN)

async def stats(message: types.Message):
    if message.from_user.id not in ADMINS:
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.")
        return
    users = session.query(User).all()
    total = len(users)
    active = sum(1 for u in users if u.is_active)
    inactive = total - active

    text = f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:\n–í—Å–µ–≥–æ: {total}\n–ê–∫—Ç–∏–≤–Ω—ã—Ö: {active}\n–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö: {inactive}\n\n–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:\n"
    for u in users:
        status = "‚úÖ –ê–∫—Ç–∏–≤–µ–Ω" if u.is_active else "‚ùå –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω"
        name = u.username if u.username else str(u.user_id)
        text += f"- {name} ‚Äî {status}\n"
    await message.answer(text)

async def users_list(message: types.Message):
    if message.from_user.id not in ADMINS:
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")
        return
    users = session.query(User.user_id).all()
    ids = [str(u.user_id) for u in users]
    await message.answer("–°–ø–∏—Å–æ–∫ user_id:\n" + "\n".join(ids))

# –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø–æ–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def find_user_by_id_or_username(identifier: str):
    if identifier.startswith('@'):
        username = identifier[1:]
        return session.query(User).filter_by(username=username).first()
    else:
        try:
            user_id = int(identifier)
            return session.query(User).filter_by(user_id=user_id).first()
        except ValueError:
            return None

async def ban_user(message: types.Message, command: CommandObject):
    if message.from_user.id not in ADMINS:
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –±–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")
        return
    args = command.args
    if not args:
        await message.answer("‚ùó –£–∫–∞–∂–∏—Ç–µ user_id –∏–ª–∏ @username –¥–ª—è –±–∞–Ω–∞.\n–ü—Ä–∏–º–µ—Ä: /ban 123456789")
        return
    user = find_user_by_id_or_username(args.strip())
    if not user:
        await message.answer("‚ùó –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return
    user.is_active = False
    session.commit()
    await message.answer(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.username or user.user_id} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω.")

async def unban_user(message: types.Message, command: CommandObject):
    if message.from_user.id not in ADMINS:
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")
        return
    args = command.args
    if not args:
        await message.answer("‚ùó –£–∫–∞–∂–∏—Ç–µ user_id –∏–ª–∏ @username –¥–ª—è —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏.\n–ü—Ä–∏–º–µ—Ä: /unban 123456789")
        return
    user = find_user_by_id_or_username(args.strip())
    if not user:
        await message.answer("‚ùó –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return
    user.is_active = True
    session.commit()
    await message.answer(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.username or user.user_id} —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω.")

async def mailing(message: types.Message):
    await message.answer("–§—É–Ω–∫—Ü–∏—è —Ä–∞—Å—Å—ã–ª–∫–∏ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.")

async def update_bot(message: types.Message):
    if message.from_user.id not in ADMINS:
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–æ—Ç–∞.")
        return
    await message.answer("üîÑ –ù–∞—á–∏–Ω–∞—é –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–æ—Ç–∞...")
    proc = await asyncio.create_subprocess_exec("git", "-C", "/root/vpnbot", "pull", stdout=asyncio.subprocess.PIPE, stderr=asyncio.subprocess.PIPE)
    stdout, stderr = await proc.communicate()
    output = (stdout + stderr).decode('utf-8')
    await message.answer(f"üì• –†–µ–∑—É–ª—å—Ç–∞—Ç git pull:\n<pre>{output}</pre>", parse_mode=ParseMode.HTML)
    await message.answer("‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ, –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫...")
    os.execv("/usr/bin/python3", ["python3", "/root/vpnbot/bot.py"])

# --- –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Ö–µ–Ω–¥–ª–µ—Ä–æ–≤ ---
dp.message.register(start, Command(commands=["start"]))

dp.message.register(buy_vpn, lambda m: m.text == "–ö—É–ø–∏—Ç—å VPN üöÄ")
dp.callback_query.register(process_fake_payment, lambda cb: cb.data and cb.data.startswith("tariff_"))
dp.message.register(get_config, lambda m: m.text == "–ú–æ–π –∫–æ–Ω—Ñ–∏–≥ ‚öôÔ∏è")
dp.message.register(support, lambda m: m.text == "–ü–æ–¥–¥–µ—Ä–∂–∫–∞ üÜò")
dp.message.register(how_install, lambda m: m.text == "–ö–∞–∫ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥ üìñ")

dp.message.register(stats, lambda m: m.text == "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ üìä")
dp.message.register(users_list, lambda m: m.text == "–Æ–∑–µ—Ä—ã üë•")
dp.message.register(update_bot, lambda m: m.text == "–û–±–Ω–æ–≤–∏—Ç—å –±–æ—Ç üîÑ")
dp.message.register(ban_user, Command(commands=["ban"]))
dp.message.register(unban_user, Command(commands=["unban"]))
dp.message.register(mailing, lambda m: m.text == "–†–∞—Å—Å—ã–ª–∫–∞ üì¢")

async def main():
    await dp.start_polling(bot)

if __name__ == '__main__':
    asyncio.run(main())
